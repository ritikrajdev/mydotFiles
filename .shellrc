#!/bin/bash

# If not running interactively, don't do anything
[[ $- != *i* ]] && return

alias ls='ls --color=auto'

# Ranger Configuration 
alias rr=ranger
function ranger {
    local IFS=$'\t\n'
    local tempfile="$(mktemp -t tmp.XXXXXX)"
    local ranger_cmd=(
        command
        ranger
        --cmd="map Q chain shell echo %d > "$tempfile"; quitall"
    )
    
    ${ranger_cmd[@]} "$@"
    if [[ -f "$tempfile" ]] && [[ "$(cat -- "$tempfile")" != "$(echo -n `pwd`)" ]]; then
        cd -- "$(cat "$tempfile")" || return
    fi
    command rm -f -- "$tempfile" 2>/dev/null
}

export GPG_TTY=$(tty)

# Default Editor is nvim Now
alias vim=nvim

# Grep Colorized Output
alias grep='grep --colour=auto'

# Github Starting ssh-agent for each shell, but only if one is not already running 
if [[ ! "$SSH_AUTH_SOCK" ]]; then
        eval $(ssh-agent) > /dev/null
fi

# Kity view Image in Terminal using icat command
alias icat="kitty +kitten icat"

# Kitty Diff
alias kdiff="kitty +kitten diff"

# Actual Diff
alias diff="diff --color"

# Alis for long listing format
alias ll="exa -lg"

# Alias for tree command
alias tree="exa --tree"

# Grep to RipGrep
alias grep="rg"

# Alias for man bat-extras-git
alias man="batman"

# Alias for valgrind
alias valgrindl='valgrind --track-origins=yes --leak-check=full --show-leak-kinds=all -s'

# Alias for g++
alias g++="g++ -std=c++14 -Wall"

# ex - archive extractor
# usage: ex <file>
ex ()
{
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xjf $1   ;;
      *.tar.gz)    tar xzf $1   ;;
      *.bz2)       bunzip2 $1   ;;
      *.rar)       unrar x $1   ;;
      *.gz)        gunzip $1    ;;
      *.tar)       tar xf $1    ;;
      *.tbz2)      tar xjf $1   ;;
      *.tgz)       tar xzf $1   ;;
      *.zip)       unzip $1     ;;
      *.Z)         uncompress $1;;
      *.7z)        7z x $1      ;;
      *)           echo "'$1' cannot be extracted via ex()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

# Skim Search (cd or open up a file)
skim()
{
	local result_dir=$(sk -q "$1")
	if [ -f "$result_dir" ]
	then
		xdg-open "$result_dir"
	elif [ -d "$result_dir" ]
	then
		cd "$result_dir"

		if [ -d "./venv" ]
		then
			source ./venv/bin/activate
		fi

	else
		return 1
	fi
	
	return 0
}

# Advent of Code Template
adc ()
{
	local aoc_folder="$HOME/Documents/Code/Advent-Of-Code/"
	local folder_name="${aoc_folder}December"
	folder_name+=$1

	mkdir -p $folder_name

	folder_name+="/"

	touch "${folder_name}test.txt" "${folder_name}input.txt"
	cp "${aoc_folder}.template-makefile" "${folder_name}Makefile"
	cp "${aoc_folder}.template-cpp.cpp"  "${folder_name}part1.cpp"
	cp "${aoc_folder}.template-cpp.cpp"  "${folder_name}part2.cpp"

	echo Done
}

pokemon()
{
	set -e

	# Do not End with trailing /
	local pokemon_directory="$HOME/Pictures/Pokemon"
	local file_prefix="Pokemon"

	if [ $# -eq 1 ]
	then
		if [ $1 = "install" ]
		then
			echo "Installing Pokemons !"
			mkdir -p $pokemon_directory
			echo "Made Directory"
			
			for (( i=1; i<=151 ; i++ ))
			do
				if [ -f "${pokemon_directory}/${file_prefix}${i}.png" ]
				then
					continue
				else
					curl -s "https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${i}.png" > "${pokemon_directory}/${file_prefix}${i}.png"
					echo "Installed Pokemon ${i} ..."
				fi
			done

			echo "Installed"
		else
			return 1
		fi

	elif [ $TERM = "xterm-kitty" ]
	then
		# set number_of_pokemons to 151 if 152nd one doesn't exist u know who's 152 xD

		local number_of_pokemons=$(ls -1 "${pokemon_directory}/" | wc -l)
		local pokemon_number=$(( RANDOM % (number_of_pokemons) + 1 )) 
		
		if [ -f "${pokemon_directory}/${file_prefix}${pokemon_number}.png" ]
		then
			kitty +kitten icat "${pokemon_directory}/${file_prefix}${pokemon_number}.png"
		else
			echo "Use following command to install pokemons :-"
			echo "pokemon install"
			return 1
		fi
	else
		return 1
	fi

	return 0
}

# Django Alias
alias pyma="python manage.py"

# Sway Configuration
alias sway=sway_wayland
sway_wayland()
{
	$SHELL ~/.config/sway/set_env.sh
	/usr/bin/sway
}

